{"id":1260069677,"question_id":300,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905266,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1260069677/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"44.2 MB","code":"import java.util.Arrays;\n\npublic class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n        int[] tails = new int[n];\n        int len = 0; // Length of the longest increasing subsequence found so far\n        \n        for (int num : nums) {\n            int left = 0, right = len;\n            // Binary search to find the smallest element in tails that is greater than or equal to num\n            while (left < right) {\n                int mid = left + (right - left) / 2;\n                if (tails[mid] < num) {\n                    left = mid + 1;\n                } else {\n                    right = mid;\n                }\n            }\n            // Replace the found element with num or append num if it's greater than all elements in tails\n            tails[left] = num;\n            // If num is greater than all elements in tails, increment len\n            if (left == len) {\n                len++;\n            }\n        }\n        \n        return len;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}