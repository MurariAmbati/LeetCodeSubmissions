{"id":1236757822,"question_id":674,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713548574,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1236757822/","is_pending":"Not Pending","title":"Longest Continuous Increasing Subsequence","memory":"44.2 MB","code":"class Solution {\n    public int findLengthOfLCIS(int[] nums) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        int maxLength = 1;  // Initialize with 1 for single element subsequences\n\n        // Base case: First element has LCIS of length 1\n        dp[0] = 1;\n\n        // Iterate through the array from the second element\n        for (int i = 1; i < n; i++) {\n            // Check if current element is greater than the previous element\n            if (nums[i] > nums[i - 1]) {\n                // Build on the LCIS ending at the previous element (dp[i-1] + 1)\n                dp[i] = dp[i - 1] + 1;\n            } else {\n                // Start a new LCIS of length 1\n                dp[i] = 1;\n            }\n            // Update maxLength if the current LCIS is longer\n            maxLength = Math.max(maxLength, dp[i]);\n        }\n\n        return maxLength;\n    }\n}\n","compare_result":"11111111111111111111111111111111111","title_slug":"longest-continuous-increasing-subsequence","has_notes":false,"flag_type":1}