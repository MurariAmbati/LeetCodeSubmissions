{"id":1236930316,"question_id":95,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713567658,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1236930316/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"44.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public List<TreeNode> generateTrees(int n) {\n        if (n == 0) {\n            return new ArrayList<>();\n        }\n        return generateTrees(1, n);\n    }\n    \n    private List<TreeNode> generateTrees(int start, int end) {\n        List<TreeNode> trees = new ArrayList<>();\n        if (start > end) {\n            trees.add(null);\n            return trees;\n        }\n        for (int i = start; i <= end; i++) {\n            List<TreeNode> leftSubtrees = generateTrees(start, i - 1);\n            List<TreeNode> rightSubtrees = generateTrees(i + 1, end);\n            for (TreeNode left : leftSubtrees) {\n                for (TreeNode right : rightSubtrees) {\n                    TreeNode root = new TreeNode(i);\n                    root.left = left;\n                    root.right = right;\n                    trees.add(root);\n                }\n            }\n        }\n        return trees;\n    }\n\n    // Helper method to print the tree structures\n    private void printTrees(List<TreeNode> trees) {\n        for (TreeNode root : trees) {\n            System.out.println(\"Tree: \");\n            printTree(root);\n            System.out.println();\n        }\n    }\n\n    // Helper method to print a single tree\n    private void printTree(TreeNode root) {\n        if (root == null) {\n            System.out.print(\"null \");\n            return;\n        }\n        System.out.print(root.val + \" \");\n        printTree(root.left);\n        printTree(root.right);\n    }\n\n}","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii","has_notes":false,"flag_type":1}