{"id":1235314347,"question_id":17,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713400865,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1235314347/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"42.5 MB","code":"public class Solution {\n    public List<String> letterCombinations(String digits) {\n        List<String> result = new ArrayList<>();\n        if (digits.isEmpty()) {\n            return result;\n        }\n\n        Map<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n\n        backtrack(digits, 0, \"\", map, result);\n        return result;\n    }\n\n    private void backtrack(String digits, int index, String combination, Map<Character, String> map, List<String> result) {\n        if (index == digits.length()) {\n            result.add(combination);\n            return;\n        }\n\n        char digit = digits.charAt(index);\n        String letters = map.get(digit);\n        for (int i = 0; i < letters.length(); i++) {\n            char letter = letters.charAt(i);\n            backtrack(digits, index + 1, combination + letter, map, result);\n        }\n    }\n}\n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}