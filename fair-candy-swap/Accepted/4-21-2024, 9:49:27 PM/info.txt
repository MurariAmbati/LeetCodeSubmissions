{"id":1238693014,"question_id":924,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713754167,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1238693014/","is_pending":"Not Pending","title":"Fair Candy Swap","memory":"46.1 MB","code":"import java.util.*;\n\nclass Solution {\n    public int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {\n        int aliceTotal = 0;\n        int bobTotal = 0;\n        Set<Integer> bobSet = new HashSet<>();\n        \n        // Calculate total candies for Alice and build a set of Bob's candies\n        for (int candy : aliceSizes) {\n            aliceTotal += candy;\n        }\n        for (int candy : bobSizes) {\n            bobTotal += candy;\n            bobSet.add(candy);\n        }\n        \n        // Calculate the difference in total candies\n        int diff = (bobTotal - aliceTotal) / 2;\n        \n        // Look for a candy in Alice's set that, when swapped with one from Bob's set, makes the totals equal\n        for (int candy : aliceSizes) {\n            if (bobSet.contains(candy + diff)) {\n                return new int[]{candy, candy + diff};\n            }\n        }\n        \n        return new int[]{};\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"fair-candy-swap","has_notes":false,"flag_type":1}