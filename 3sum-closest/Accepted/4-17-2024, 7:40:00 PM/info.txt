{"id":1235313901,"question_id":16,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713400800,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1235313901/","is_pending":"Not Pending","title":"3Sum Closest","memory":"43.3 MB","code":"public class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        Arrays.sort(nums);  // Sort the array for efficient lookups\n\n        int closestSum = nums[0] + nums[1] + nums[2];  // Initialize with first three elements\n\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) { // Skip duplicate elements (i)\n                continue;\n            }\n            int low = i + 1;\n            int high = nums.length - 1;\n\n            while (low < high) {\n                int currentSum = nums[i] + nums[low] + nums[high];\n                int diff = Math.abs(currentSum - target);  // Absolute difference\n\n                if (diff == 0) {  // If exact match found, return directly\n                    return currentSum;\n                } else if (diff < Math.abs(closestSum - target)) {  // Update closest sum if difference is smaller\n                    closestSum = currentSum;\n                }\n\n                if (currentSum < target) {\n                    low++;\n                } else {\n                    high--;\n                }\n            }\n        }\n\n        return closestSum;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum-closest","has_notes":false,"flag_type":1}