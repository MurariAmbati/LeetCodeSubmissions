{"id":1260118712,"question_id":474,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715912186,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/1260118712/","is_pending":"Not Pending","title":"Ones and Zeroes","memory":"75 MB","code":"class Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n        int[][][] dp = new int[strs.length + 1][m + 1][n + 1];\n\n        for (int i = 1; i <= strs.length; i++) {\n            int[] count = countZerosOnes(strs[i - 1]);\n            int countZero = count[0];\n            int countOne = count[1];\n\n            for (int j = 0; j <= m; j++) {\n                for (int k = 0; k <= n; k++) {\n                    if (j >= countZero && k >= countOne) {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], dp[i - 1][j - countZero][k - countOne] + 1);\n                    } else {\n                        dp[i][j][k] = dp[i - 1][j][k];\n                    }\n                }\n            }\n        }\n\n        return dp[strs.length][m][n];\n    }\n\n    private int[] countZerosOnes(String str) {\n        int[] count = new int[2];\n        for (char c : str.toCharArray()) {\n            count[c - '0']++;\n        }\n        return count;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ones-and-zeroes","has_notes":false,"flag_type":1}