{"id":1241949466,"question_id":45,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1714073304,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1241949466/","is_pending":"Not Pending","title":"Jump Game II","memory":"N/A","code":"class Solution {\n    public int jump(int[] nums) {\n        int n = nums.length;\n        int maxReach = nums[0];  // Maximum reachable index from current position\n        int farthest = maxReach;  // Farthest reachable index seen so far\n        int jumps = 0;  // Number of jumps made\n\n        for (int i = 1; i < n - 1; i++) {\n            // Handle the case where the current reach can't reach the end\n            if (i > maxReach) {\n                return -1;\n            }\n            \n            // Update farthest reachable index and jumps if needed\n            farthest = Math.max(farthest, i + nums[i]);\n            if (i == maxReach) {\n                jumps++;\n                maxReach = farthest;\n            }\n        }\n\n        return jumps + (farthest >= n - 1 ? 1 : 0);  // Check and add a jump for the last element\n    }\n}\n","compare_result":"1100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-ii","has_notes":false,"flag_type":1}