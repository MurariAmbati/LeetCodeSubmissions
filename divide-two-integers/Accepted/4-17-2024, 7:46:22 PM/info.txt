{"id":1235316464,"question_id":29,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713401182,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1235316464/","is_pending":"Not Pending","title":"Divide Two Integers","memory":"40.9 MB","code":"public class Solution {\n    public int divide(int dividend, int divisor) {\n        // Handle special cases\n        if (divisor == 0) {\n            return Integer.MAX_VALUE; // Division by zero is undefined, return max value\n        }\n        if (dividend == Integer.MIN_VALUE && divisor == -1) {\n            return Integer.MAX_VALUE; // Overflow case, return max value\n        }\n\n        // Convert signs to positive for easier handling\n        boolean isNegative = (dividend > 0) ^ (divisor > 0);\n        long absDividend = Math.abs((long) dividend);\n        long absDivisor = Math.abs((long) divisor);\n\n        // Perform bitwise shift-based division (efficient for large numbers)\n        long quotient = 0;\n        while (absDividend >= absDivisor) {\n            int shift = 0;\n            while (absDividend >= (absDivisor << shift)) {\n                shift++;\n            }\n            quotient += (long) 1 << (shift - 1);\n            absDividend -= absDivisor << (shift - 1);\n        }\n\n        // Apply original signs and handle overflow\n        quotient = isNegative ? -quotient : quotient;\n        if (quotient > Integer.MAX_VALUE) {\n            return Integer.MAX_VALUE;\n        } else if (quotient < Integer.MIN_VALUE) {\n            return Integer.MIN_VALUE;\n        }\n\n        return (int) quotient;\n    }\n}\n","compare_resulttitle_slug":"divide-two-integers","has_notes":false,"flag_type":1}