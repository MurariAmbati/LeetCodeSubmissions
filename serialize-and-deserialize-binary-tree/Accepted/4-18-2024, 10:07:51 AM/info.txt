{"id":1235818345,"question_id":297,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713452871,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1235818345/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"46.1 MB","code":"import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int val) {\n        this.val = val;\n    }\n}\n\npublic class Codec {\n\n    private static final String DELIMITER = \",\";\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        StringBuilder sb = new StringBuilder();\n        serializeHelper(root, sb);\n        return sb.toString();\n    }\n\n    private void serializeHelper(TreeNode root, StringBuilder sb) {\n        if (root == null) {\n            sb.append(\"null\").append(DELIMITER);\n            return;\n        }\n        sb.append(root.val).append(DELIMITER);\n        serializeHelper(root.left, sb);\n        serializeHelper(root.right, sb);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        String[] values = data.split(DELIMITER);\n        Queue<String> queue = new LinkedList<>(Arrays.asList(values));\n        return deserializeHelper(queue);\n    }\n\n    private TreeNode deserializeHelper(Queue<String> queue) {\n        String value = queue.poll();\n        if (value.equals(\"null\")) {\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.parseInt(value));\n        root.left = deserializeHelper(queue);\n        root.right = deserializeHelper(queue);\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}