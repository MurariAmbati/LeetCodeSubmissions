{"id":1236926186,"question_id":47,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713566917,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1236926186/","is_pending":"Not Pending","title":"Permutations II","memory":"44 MB","code":"import java.util.*;\n\npublic class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        Arrays.sort(nums); // Sort to ensure duplicates are adjacent\n        backtrack(result, new ArrayList<>(), nums, new boolean[nums.length]);\n        return result;\n    }\n    \n    private void backtrack(List<List<Integer>> result, List<Integer> temp, int[] nums, boolean[] used) {\n        if (temp.size() == nums.length) {\n            result.add(new ArrayList<>(temp));\n            return;\n        }\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {\n                continue; // Skip duplicates\n            }\n            temp.add(nums[i]);\n            used[i] = true;\n            backtrack(result, temp, nums, used);\n            temp.remove(temp.size() - 1);\n            used[i] = false;\n        }\n    }\n}\n","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1}