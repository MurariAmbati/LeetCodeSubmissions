{"id":1236923870,"question_id":62,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713566498,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1236923870/","is_pending":"Not Pending","title":"Unique Paths","memory":"40.1 MB","code":"public class Solution {\n    public int uniquePaths(int m, int n) {\n        // Create a 2D array to store the number of unique paths\n        int[][] dp = new int[m][n];\n        \n        // Fill the first row and first column with 1s (only one way to reach each cell)\n        for (int i = 0; i < m; i++) {\n            dp[i][0] = 1;\n        }\n        for (int j = 0; j < n; j++) {\n            dp[0][j] = 1;\n        }\n        \n        // Calculate the number of unique paths for each cell\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n        \n        // Return the number of unique paths to reach the bottom-right corner\n        return dp[m - 1][n - 1];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths","has_notes":false,"flag_type":1}