{"id":1235815650,"question_id":239,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713452641,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1235815650/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"59.1 MB","code":"public class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return new int[0];\n        }\n\n        int n = nums.length;\n        int[] result = new int[n - k + 1];\n        Deque<Integer> deque = new ArrayDeque<>();\n\n        for (int i = 0; i < n; i++) {\n            // Remove indices from the front of the deque that are outside the current window\n            while (!deque.isEmpty() && deque.peek() < i - k + 1) {\n                deque.poll();\n            }\n\n            // Remove indices from the back of the deque whose corresponding elements are smaller than or equal to nums[i]\n            while (!deque.isEmpty() && nums[deque.peekLast()] <= nums[i]) {\n                deque.pollLast();\n            }\n\n            // Add the current index to the back of the deque\n            deque.offer(i);\n\n            // If the current index i is greater than or equal to k - 1, update the result\n            if (i >= k - 1) {\n                result[i - k + 1] = nums[deque.peek()];\n            }\n        }\n\n        return result;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}