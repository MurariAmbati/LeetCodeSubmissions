{"id":1260069322,"question_id":115,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905212,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1260069322/","is_pending":"Not Pending","title":"Distinct Subsequences","memory":"48.8 MB","code":"public class Solution {\n    public int numDistinct(String s, String t) {\n        int m = s.length();\n        int n = t.length();\n        \n        // Initialize dp array\n        int[][] dp = new int[m + 1][n + 1];\n        \n        // Base case: Empty string t can be formed from any non-empty string s\n        for (int i = 0; i <= m; i++) {\n            dp[i][0] = 1;\n        }\n        \n        // Fill up the dp array\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (s.charAt(i - 1) == t.charAt(j - 1)) {\n                    // Characters match, two choices: include or exclude current character\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n                } else {\n                    // Characters don't match, exclude current character\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        \n        // Return the number of distinct subsequences of s which equals t\n        return dp[m][n];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"distinct-subsequences","has_notes":false,"flag_type":1}