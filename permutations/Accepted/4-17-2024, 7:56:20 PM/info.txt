{"id":1235320547,"question_id":46,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713401780,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1235320547/","is_pending":"Not Pending","title":"Permutations","memory":"44.6 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> results = new ArrayList<>();\n        permute(nums, 0, results);\n        return results;\n    }\n    \n    private void permute(int[] nums, int startIndex, List<List<Integer>> results) {\n        if (startIndex == nums.length) {\n            List<Integer> currPerm = new ArrayList<>();\n            for (int num : nums) {\n                currPerm.add(num);\n            }\n            results.add(currPerm);\n            return;\n        }\n        \n        for (int i = startIndex; i < nums.length; i++) {\n            // Swap elements to create new orderings\n            swap(nums, startIndex, i);\n            permute(nums, startIndex + 1, results);\n            swap(nums, startIndex, i);  // Backtrack and swap back\n        }\n    }\n    \n    private void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}