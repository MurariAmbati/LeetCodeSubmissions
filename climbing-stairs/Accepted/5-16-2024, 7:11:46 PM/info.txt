{"id":1260065848,"question_id":70,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715904706,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1260065848/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"40.3 MB","code":"class Solution {\n    public int climbStairs(int n) {\n        if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else {\n            // Use dynamic programming to store previously calculated results\n            int[] dp = new int[n + 1];\n            dp[1] = 1;\n            dp[2] = 2;\n\n            // Iteratively calculate the number of ways for each step\n            for (int i = 3; i <= n; i++) {\n                dp[i] = dp[i - 1] + dp[i - 2];\n            }\n\n            return dp[n];\n        }\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false,"flag_type":1}