{"id":1260117655,"question_id":124,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715912049,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1260117655/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"43.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\nclass Solution {\n    int maxSum = Integer.MIN_VALUE;\n\n    public int maxPathSum(TreeNode root) {\n        maxGain(root);\n        return maxSum;\n    }\n\n    private int maxGain(TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n\n        // Get the maximum sum on the left and right subtrees\n        int leftGain = Math.max(maxGain(node.left), 0);\n        int rightGain = Math.max(maxGain(node.right), 0);\n\n        // Update the maximum path sum if needed\n        maxSum = Math.max(maxSum, leftGain + rightGain + node.val);\n\n        // Return the maximum gain that can be obtained for the current subtree\n        return node.val + Math.max(leftGain, rightGain);\n    \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}