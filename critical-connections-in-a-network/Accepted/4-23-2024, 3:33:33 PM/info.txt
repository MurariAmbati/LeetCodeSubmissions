{"id":1240218611,"question_id":1300,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713904413,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/1240218611/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"119.6 MB","code":"class Solution {\n  public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {\n    List<List<Integer>> graph = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n      graph.add(new ArrayList<>());\n    }\n    \n    for (List<Integer> connection : connections) {\n      int u = connection.get(0);\n      int v = connection.get(1);\n      graph.get(u).add(v);\n      graph.get(v).add(u); // Add for undirected graph\n    }\n    \n    int[] disc = new int[n];\n    int[] low = new int[n];\n    boolean[] visited = new boolean[n];\n    List<List<Integer>> result = new ArrayList<>();\n    int time = 0;\n    \n    dfs(graph, 0, -1, disc, low, visited, result, time);\n    \n    return result;\n  }\n  \n  private void dfs(List<List<Integer>> graph, int node, int parent, int[] disc, int[] low, boolean[] visited, List<List<Integer>> result, int time) {\n    disc[node] = low[node] = time++;\n    visited[node] = true;\n    \n    for (int neighbor : graph.get(node)) {\n      if (neighbor == parent) continue;\n      \n      if (!visited[neighbor]) {\n        dfs(graph, neighbor, node, disc, low, visited, result, time);\n        low[node] = Math.min(low[node], low[neighbor]);\n        if (low[neighbor] > disc[node]) {\n          result.add(Arrays.asList(node, neighbor));\n        }\n      } else {\n        low[node] = Math.min(low[node], disc[neighbor]);\n      }\n    }\n  }\n}\n","compare_result":"11111111111111111","title_slug":"critical-connections-in-a-network","has_notes":false,"flag_type":1}