{"id":1235322302,"question_id":50,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713402025,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1235322302/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution {\n    public double myPow(double x, int n) {\n        if (n == 0) {\n            return 1.0;  // Handle n=0 case\n        } else if (n < 0) {\n            return 1.0 / pow(x, -n);  // Handle negative exponents efficiently\n        } else {\n            double result = 1.0;\n            while (n > 0) {\n                if ((n & 1) == 1) {  // Efficiently handle odd powers using bitwise AND\n                    result *= x;\n                }\n                n >>>= 1;  // Right shift n by 1 for repeated squaring\n                x *= x;  // Square x for even powers\n            }\n            return result;\n        }\n    }\n\n    // Helper function for better readability (optional)\n    private double pow(double x, int n) {\n        return myPow(x, n);\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000","title_slug":"powx-n","has_notes":false,"flag_type":1}