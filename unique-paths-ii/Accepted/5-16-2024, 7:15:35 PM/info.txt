{"id":1260067423,"question_id":63,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715904935,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1260067423/","is_pending":"Not Pending","title":"Unique Paths II","memory":"41.9 MB","code":"public class Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n        int m = obstacleGrid.length;\n        int n = obstacleGrid[0].length;\n\n        // Create a 2D array to store the number of unique paths\n        int[][] dp = new int[m][n];\n\n        // Initialize the number of unique paths for the first row and first column\n        for (int i = 0; i < m && obstacleGrid[i][0] == 0; i++) {\n            dp[i][0] = 1;\n        }\n        for (int j = 0; j < n && obstacleGrid[0][j] == 0; j++) {\n            dp[0][j] = 1;\n        }\n\n        // Calculate the number of unique paths for each cell\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (obstacleGrid[i][j] == 0) {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n                }\n            }\n        }\n\n        // Return the number of unique paths to reach the bottom-right corner\n        return dp[m - 1][n - 1];\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"unique-paths-ii","has_notes":false,"flag_type":1}