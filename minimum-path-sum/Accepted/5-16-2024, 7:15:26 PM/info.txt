{"id":1260067363,"question_id":64,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715904926,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1260067363/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"45.7 MB","code":"public class Solution {\n    public int minPathSum(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n\n        // Create a 2D array to store the minimum sum of all numbers along the path\n        int[][] dp = new int[m][n];\n\n        // Initialize the minimum sum for the top-left cell\n        dp[0][0] = grid[0][0];\n\n        // Initialize the minimum sum for the first column\n        for (int i = 1; i < m; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n\n        // Initialize the minimum sum for the first row\n        for (int j = 1; j < n; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n\n        // Calculate the minimum sum for each cell\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n\n        // Return the minimum sum to reach the bottom-right corner\n        return dp[m - 1][n - 1];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum","has_notes":false,"flag_type":1}