{"id":1236925066,"question_id":74,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713566719,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1236925066/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"42 MB","code":"public class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        \n        int left = 0;\n        int right = m * n - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            int midValue = matrix[mid / n][mid % n];\n            \n            if (midValue == target) {\n                return true;\n            } else if (midValue < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false,"flag_type":1}