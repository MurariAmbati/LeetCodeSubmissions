{"id":1236931397,"question_id":99,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713567875,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1236931397/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    private TreeNode firstNode;\n    private TreeNode secondNode;\n    private TreeNode prevNode;\n    \n    public void recoverTree(TreeNode root) {\n        firstNode = null;\n        secondNode = null;\n        prevNode = null;\n        \n        // Perform in-order traversal\n        traverse(root);\n        \n        // Swap values of first and second nodes\n        int temp = firstNode.val;\n        firstNode.val = secondNode.val;\n        secondNode.val = temp;\n    }\n    \n    private void traverse(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        \n        // Traverse left subtree\n        traverse(node.left);\n        \n        // Check for violation\n        if (prevNode != null && prevNode.val > node.val) {\n            if (firstNode == null) {\n                firstNode = prevNode;\n            }\n            secondNode = node;\n        }\n        prevNode = node;\n        \n        // Traverse right subtree\n        traverse(node.right);\n    }\n}","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false,"flag_type":1}