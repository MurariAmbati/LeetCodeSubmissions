{"id":1235350198,"question_id":295,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713405924,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1235350198/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"N/A","code":"class MedianFinder {\n    private PriorityQueue<Integer> minHeap; // Stores the smaller half (ascending order)\n    private PriorityQueue<Integer> maxHeap; // Stores the larger half (descending order)\n\n    public MedianFinder() {\n        minHeap = new PriorityQueue<>();\n        maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b, a)); // Reverse order for descending priority using Integer.compare()\n    }\n\n    public void addNum(int num) {\n        maxHeap.offer(num); // Initially add to maxHeap\n\n        // Balance the heaps: move elements from maxHeap to minHeap if maxHeap size is larger\n        if (maxHeap.size() > minHeap.size() + 1) {\n            minHeap.offer(maxHeap.poll());\n        }\n    }\n\n    public double findMedian() {\n        if (minHeap.isEmpty() && maxHeap.isEmpty()) {\n            throw new RuntimeException(\"No elements added yet!\"); // Clear error message\n        }\n\n        // If both heaps have the same size, the median is the average of their tops\n        if (minHeap.size() == maxHeap.size()) {\n            return (double) minHeap.peek() + (double) maxHeap.peek() / 2.0;\n        } else {\n            // If minHeap has one more element, the median is its top\n            return minHeap.peek();\n        }\n    }\n}\n","compare_result":"000000000000000000000","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}