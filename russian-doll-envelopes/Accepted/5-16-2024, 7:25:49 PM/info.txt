{"id":1260071663,"question_id":354,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905549,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1260071663/","is_pending":"Not Pending","title":"Russian Doll Envelopes","memory":"104.6 MB","code":"import java.util.Arrays;\n\npublic class Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        // Sort the envelopes based on their widths in ascending order\n        // If the widths are equal, sort based on the heights in descending order\n        Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n\n        int n = envelopes.length;\n        int[] dp = new int[n];\n        int len = 0;\n\n        // Iterate through the sorted envelopes array\n        for (int[] envelope : envelopes) {\n            int h = envelope[1];\n            // Use binary search to find the correct position to insert the current envelope's height into the LIS array\n            int left = 0, right = len;\n            while (left < right) {\n                int mid = left + (right - left) / 2;\n                if (dp[mid] < h) {\n                    left = mid + 1;\n                } else {\n                    right = mid;\n                }\n            }\n            // If pos == len, increment len to represent the current LIS length\n            if (left == len) {\n                len++;\n            }\n            // Update dp[left] with the current envelope's height\n            dp[left] = h;\n        }\n\n        return len;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"russian-doll-envelopes","has_notes":false,"flag_type":1}