{"id":1260071419,"question_id":354,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905514,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1260071419/","is_pending":"Not Pending","title":"Russian Doll Envelopes","memory":"N/A","code":"public class Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        // Sort the envelopes based on their widths in ascending order\n        // If the widths are equal, sort based on the heights in descending order\n        Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n\n        int n = envelopes.length;\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1); // Initialize dp array with 1s\n\n        int maxEnvelopes = 1;\n\n        // Iterate through the sorted envelopes array\n        for (int i = 1; i < n; i++) {\n            // Iterate through the envelopes before it\n            for (int j = 0; j < i; j++) {\n                // If envelope[i] can fit into envelope[j]\n                if (envelopes[i][0] > envelopes[j][0] && envelopes[i][1] > envelopes[j][1]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1); // Update dp[i]\n                }\n            }\n            maxEnvelopes = Math.max(maxEnvelopes, dp[i]); // Update maxEnvelopes\n        }\n\n        return maxEnvelopes;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111100","title_slug":"russian-doll-envelopes","has_notes":false,"flag_type":1}