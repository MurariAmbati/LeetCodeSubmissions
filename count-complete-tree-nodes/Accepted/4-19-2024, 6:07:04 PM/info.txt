{"id":1236932161,"question_id":222,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713568024,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1236932161/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"47.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int countNodes(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        \n        int leftDepth = getLeftDepth(root);\n        int rightDepth = getRightDepth(root);\n        \n        if (leftDepth == rightDepth) {\n            // The tree is full, use the formula 2^h - 1 to calculate the number of nodes\n            return (1 << leftDepth) - 1;\n        } else {\n            // The tree is not full, recursively count the nodes in the left and right subtrees\n            return 1 + countNodes(root.left) + countNodes(root.right);\n        }\n    }\n    \n    private int getLeftDepth(TreeNode node) {\n        int depth = 0;\n        while (node != null) {\n            depth++;\n            node = node.left;\n        }\n        return depth;\n    }\n    \n    private int getRightDepth(TreeNode node) {\n        int depth = 0;\n        while (node != null) {\n            depth++;\n            node = node.right;\n        }\n        return depth;\n    }\n}","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes","has_notes":false,"flag_type":1}