{"id":1235323707,"question_id":56,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713402234,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1235323707/","is_pending":"Not Pending","title":"Merge Intervals","memory":"46.3 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals.length == 0) {\n            return new int[0][2];\n        }\n\n        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));  // Sort intervals by starting points\n\n        List<int[]> merged = new ArrayList<>();\n        int[] current = intervals[0];  // Initialize with the first interval\n\n        for (int[] interval : intervals) {\n            if (interval[0] <= current[1]) {  // Check for overlap\n                current[1] = Math.max(current[1], interval[1]);  // Merge overlapping intervals\n            } else {\n                merged.add(current);  // No overlap, add previous interval to merged list\n                current = interval;  // Start a new interval\n            }\n        }\n\n        merged.add(current);  // Add the last interval (might not have been merged)\n\n        return merged.toArray(new int[merged.size()][2]);  // Convert list to 2D array\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}