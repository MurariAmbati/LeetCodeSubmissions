{"id":1236925390,"question_id":77,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713566780,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1236925390/","is_pending":"Not Pending","title":"Combinations","memory":"94.2 MB","code":"import java.util.*;\n\npublic class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        List<List<Integer>> result = new ArrayList<>();\n        backtrack(result, new ArrayList<>(), n, k, 1);\n        return result;\n    }\n    \n    private void backtrack(List<List<Integer>> result, List<Integer> temp, int n, int k, int start) {\n        if (temp.size() == k) {\n            result.add(new ArrayList<>(temp));\n            return;\n        }\n        \n        for (int i = start; i <= n; i++) {\n            temp.add(i);\n            backtrack(result, temp, n, k, i + 1);\n            temp.remove(temp.size() - 1);\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false,"flag_type":1}