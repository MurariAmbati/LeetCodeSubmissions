{"id":1235802963,"question_id":212,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713451569,"status":10,"status_display":"Accepted","runtime":"153 ms","url":"/submissions/detail/1235802963/","is_pending":"Not Pending","title":"Word Search II","memory":"44.8 MB","code":"import java.util.ArrayList;\nimport java.util.List;\n\nclass TrieNode {\n    TrieNode[] children;\n    String word;\n\n    public TrieNode() {\n        children = new TrieNode[26];\n        word = null;\n    }\n}\n\nclass Trie {\n    TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            int index = ch - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n        node.word = word;\n    }\n}\n\npublic class Solution {\n    private int m, n;\n\n    public List<String> findWords(char[][] board, String[] words) {\n        List<String> result = new ArrayList<>();\n        Trie trie = new Trie();\n        \n        // Build the Trie from the given list of words\n        for (String word : words) {\n            trie.insert(word);\n        }\n\n        m = board.length;\n        n = board[0].length;\n\n        // Explore each cell on the board\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dfs(board, i, j, trie.root, result);\n            }\n        }\n\n        return result;\n    }\n\n    private void dfs(char[][] board, int i, int j, TrieNode node, List<String> result) {\n        if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] == '#' || node.children[board[i][j] - 'a'] == null) {\n            return;\n        }\n\n        char ch = board[i][j];\n        node = node.children[ch - 'a'];\n\n        if (node.word != null) {\n            result.add(node.word);\n            node.word = null; // Avoid duplicate results\n        }\n\n        // Mark the cell as visited\n        board[i][j] = '#';\n\n        // Explore adjacent cells\n        dfs(board, i + 1, j, node, result);\n        dfs(board, i - 1, j, node, result);\n        dfs(board, i, j + 1, node, result);\n        dfs(board, i, j - 1, node, result);\n\n        // Restore the cell's original value\n        board[i][j] = ch;\n    }\n\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}