{"id":1241959177,"question_id":92,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1714074201,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1241959177/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\npublic class Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        if (head == null || left == right) {\n            return head;\n        }\n\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode prev = dummy;\n\n        // Move prev to the node just before the sublist to be reversed\n        for (int i = 0; i < left - 1; i++) {\n            prev = prev.next;\n        }\n\n        // Start is the node from which we start reversing\n        ListNode start = prev.next;\n        // Tail is the node at the end of the sublist to be reversed\n        ListNode tail = start;\n        // Move tail to the node at position 'right'\n        for (int i = left; i < right; i++) {\n            tail = tail.next;\n        }\n\n        // Remove the sublist from the original list\n        prev.next = null;\n        // Store the next node after the sublist\n        ListNode next = tail.next;\n        // Reverse the sublist\n        tail.next = null;\n        reverse(start);\n\n        // Connect the reversed sublist back to the original list\n        prev.next = tail;\n        start.next = next;\n\n        return dummy.next;\n    }\n}","compare_result":null,"title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1}