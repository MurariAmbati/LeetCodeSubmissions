{"id":1260067596,"question_id":120,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715904962,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1260067596/","is_pending":"Not Pending","title":"Triangle","memory":"43.2 MB","code":"import java.util.List;\n\npublic class Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n        // Get the number of rows in the triangle\n        int n = triangle.size();\n        \n        // Initialize the dp array to store the minimum path sum\n        int[] dp = new int[n];\n        \n        // Initialize dp array with the values of the bottom row\n        for (int i = 0; i < n; i++) {\n            dp[i] = triangle.get(n - 1).get(i);\n        }\n        \n        // Iterate from the second last row to the top row\n        for (int i = n - 2; i >= 0; i--) {\n            // Update each element in the current row with the minimum path sum\n            for (int j = 0; j <= i; j++) {\n                dp[j] = triangle.get(i).get(j) + Math.min(dp[j], dp[j + 1]);\n            }\n        }\n        \n        // Return the minimum path sum from top to bottom\n        return dp[0];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"triangle","has_notes":false,"flag_type":1}