{"id":1260068552,"question_id":139,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905101,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1260068552/","is_pending":"Not Pending","title":"Word Break","memory":"42 MB","code":"import java.util.*;\n\npublic class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        // Create a set to store words from wordDict for efficient lookup\n        Set<String> wordSet = new HashSet<>(wordDict);\n        \n        // Initialize dp array\n        boolean[] dp = new boolean[s.length() + 1];\n        dp[0] = true; // An empty string can always be segmented\n        \n        // Iterate through each position in the string\n        for (int i = 1; i <= s.length(); i++) {\n            // Iterate through each word in wordDict\n            for (String word : wordDict) {\n                // Check if the current word ends at position i and if the substring before that can be segmented\n                if (i >= word.length() && dp[i - word.length()] && s.substring(i - word.length(), i).equals(word)) {\n                    dp[i] = true; // Update dp[i] to true\n                    break; // No need to check other words if the current word is found\n                }\n            }\n        }\n        \n        // Return the value of dp[s.length()], which represents whether the entire string can be segmented\n        return dp[s.length()];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"word-break","has_notes":false,"flag_type":1}