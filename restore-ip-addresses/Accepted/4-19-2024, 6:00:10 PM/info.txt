{"id":1236930024,"question_id":93,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713567610,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1236930024/","is_pending":"Not Pending","title":"Restore IP Addresses","memory":"42.3 MB","code":"import java.util.*;\n\npublic class Solution {\n    public List<String> restoreIpAddresses(String s) {\n        List<String> result = new ArrayList<>();\n        backtrack(s, new ArrayList<>(), result, 0);\n        return result;\n    }\n\n    private void backtrack(String s, List<String> current, List<String> result, int start) {\n        // If we have already found 4 parts and used all characters in s, add the IP address to the result\n        if (current.size() == 4 && start == s.length()) {\n            result.add(String.join(\".\", current));\n            return;\n        }\n        \n        // If we have already found 4 parts but still have characters left in s, return\n        if (current.size() == 4 || start == s.length()) {\n            return;\n        }\n\n        // Try adding dots at different positions and continue recursion\n        for (int i = start; i < Math.min(start + 3, s.length()); i++) {\n            String part = s.substring(start, i + 1);\n            // Check if the part is valid (no leading zeros and within 0-255)\n            if (isValid(part)) {\n                current.add(part);\n                backtrack(s, current, result, i + 1);\n                current.remove(current.size() - 1);\n            }\n        }\n    }\n\n    private boolean isValid(String part) {\n        // Check if the part has no leading zeros and is within 0-255\n        return !((part.length() > 1 && part.charAt(0) == '0') || Integer.parseInt(part) > 255);\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"restore-ip-addresses","has_notes":false,"flag_type":1}