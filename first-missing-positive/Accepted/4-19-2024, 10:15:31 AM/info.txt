{"id":1236650996,"question_id":41,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713539731,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1236650996/","is_pending":"Not Pending","title":"First Missing Positive","memory":"57.9 MB","code":"class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        // In-place modification to utilize the array elements\n        for (int i = 0; i < n; i++) {\n            // Check if the current element is within the valid range (1 to n)\n            // and is not already in its correct position (i.e., nums[i] = i + 1)\n            while (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1]) {\n                // Swap the element with the element at its correct position\n                int j = nums[i] - 1;\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n        \n        // Find the first element that doesn't match its index (i.e., nums[i] != i + 1)\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        \n        // If all elements are in their correct positions, the missing number is n + 1\n        return n + 1;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"first-missing-positive","has_notes":false,"flag_type":1}