{"id":1273447364,"question_id":445,"lang":"java","lang_name":"Java","time":"1 hour, 17 minutes","timestamp":1717172861,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1273447364/","is_pending":"Not Pending","title":"Add Two Numbers II","memory":"44.1 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\npublic class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        // Reverse both input linked lists\n        l1 = reverseList(l1);\n        l2 = reverseList(l2);\n        \n        // Initialize variables for addition and carry\n        ListNode dummy = new ListNode(-1); // Dummy head for result list\n        ListNode current = dummy;\n        int carry = 0;\n        \n        // Traverse both linked lists and perform addition\n        while (l1 != null || l2 != null || carry != 0) {\n            int sum = carry;\n            if (l1 != null) {\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if (l2 != null) {\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            // Update carry and create new node for result list\n            carry = sum / 10;\n            sum %= 10;\n            current.next = new ListNode(sum);\n            current = current.next;\n        }\n        \n        // Reverse the result list and return\n        return reverseList(dummy.next);\n    }\n    \n    // Helper function to reverse a linked list\n    private ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode current = head;\n        while (current != null) {\n            ListNode nextTemp = current.next;\n            current.next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Example 1\n        ListNode l1 = new ListNode(7);\n        l1.next = new ListNode(2);\n        l1.next.next = new ListNode(4);\n        l1.next.next.next = new ListNode(3);\n\n        ListNode l2 = new ListNode(5);\n        l2.next = new ListNode(6);\n        l2.next.next = new ListNode(4);\n\n        ListNode result = sol.addTwoNumbers(l1, l2);\n        printList(result); // Output: [7,8,0,7]\n        \n        // Example 2\n        l1 = new ListNode(2);\n        l1.next = new ListNode(4);\n        l1.next.next = new ListNode(3);\n\n        l2 = new ListNode(5);\n        l2.next = new ListNode(6);\n        l2.next.next = new ListNode(4);\n\n        result = sol.addTwoNumbers(l1, l2);\n        printList(result); // Output: [8,0,7]\n        \n        // Example 3\n        l1 = new ListNode(0);\n        l2 = new ListNode(0);\n\n        result = sol.addTwoNumbers(l1, l2);\n        printList(result); // Output: [0]\n    }\n    \n    // Helper function to print the linked list\n    private static void printList(ListNode head) {\n        while (head != null) {\n            System.out.print(head.val + \" \");\n            head = head.next;\n        }\n        System.out.println();\n    }\n}","compare_resulttitle_slug":"add-two-numbers-ii","has_notes":false,"flag_type":1}