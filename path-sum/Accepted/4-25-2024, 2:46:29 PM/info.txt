{"id":1241961104,"question_id":112,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1714074389,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1241961104/","is_pending":"Not Pending","title":"Path Sum","memory":"43.2 MB","code":"class Solution {\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        if (root == null) {\n            return false;  // Base case: Empty tree\n        }\n        return dfs(root, targetSum, 0);\n    }\n\n    private boolean dfs(TreeNode node, int targetSum, int currentSum) {\n        currentSum += node.val;\n        // If it's a leaf node and the current sum matches the target, return True\n        if (node.left == null && node.right == null && currentSum == targetSum) {\n            return true;\n        }\n        // Otherwise, recursively check left and right subtrees\n        if (node.left != null && dfs(node.left, targetSum, currentSum)) {\n            return true;\n        }\n        if (node.right != null && dfs(node.right, targetSum, currentSum)) {\n            return true;\n        }\n        return false;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum","has_notes":false,"flag_type":1}