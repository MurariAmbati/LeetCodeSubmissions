{"id":1260074817,"question_id":188,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715906005,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1260074817/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock IV","memory":"42.1 MB","code":"public class Solution {\n    public int maxProfit(int k, int[] prices) {\n        if (prices == null || prices.length == 0 || k <= 0) {\n            return 0;\n        }\n        \n        int n = prices.length;\n        if (k >= n / 2) {\n            // If k is large enough to perform unlimited transactions,\n            // we can just calculate the total profit by buying at each\n            // local minimum and selling at each local maximum.\n            int maxProfit = 0;\n            for (int i = 1; i < n; i++) {\n                if (prices[i] > prices[i - 1]) {\n                    maxProfit += prices[i] - prices[i - 1];\n                }\n            }\n            return maxProfit;\n        }\n        \n        int[][] dp = new int[n][k + 1];\n        \n        for (int j = 1; j <= k; j++) {\n            int maxDiff = -prices[0];\n            for (int i = 1; i < n; i++) {\n                dp[i][j] = Math.max(dp[i - 1][j], prices[i] + maxDiff);\n                maxDiff = Math.max(maxDiff, dp[i][j - 1] - prices[i]);\n            }\n        }\n        \n        return dp[n - 1][k];\n    }\n    \n\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-iv","has_notes":false,"flag_type":1}