{"id":1273438821,"question_id":60,"lang":"java","lang_name":"Java","time":"1 hour, 28 minutes","timestamp":1717172203,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1273438821/","is_pending":"Not Pending","title":"Permutation Sequence","memory":"40.7 MB","code":"public class Solution {\n    public String getPermutation(int n, int k) {\n        // Precompute factorials\n        int[] factorial = new int[n + 1];\n        factorial[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial[i] = factorial[i - 1] * i;\n        }\n\n        // Convert k to zero-based index\n        k--;\n\n        // Initialize the numbers list\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            numbers.add(i);\n        }\n\n        // Build the k-th permutation\n        StringBuilder sb = new StringBuilder();\n        for (int i = n; i > 0; i--) {\n            int index = k / factorial[i - 1];\n            sb.append(numbers.get(index));\n            numbers.remove(index);\n            k %= factorial[i - 1];\n        }\n\n        return sb.toString();\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"permutation-sequence","has_notes":false,"flag_type":1}