{"id":1236868571,"question_id":637,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713558692,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1236868571/","is_pending":"Not Pending","title":"Average of Levels in Binary Tree","memory":"45.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode root) {\n        List<Double> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int levelSize = queue.size();\n            double levelSum = 0.0;\n            for (int i = 0; i < levelSize; i++) {\n                TreeNode node = queue.poll();\n                levelSum += node.val;\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n            result.add(levelSum / levelSize);\n        }\n        return result;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"average-of-levels-in-binary-tree","has_notes":false,"flag_type":1}