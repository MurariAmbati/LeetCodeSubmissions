{"id":1236653019,"question_id":51,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713539908,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1236653019/","is_pending":"Not Pending","title":"N-Queens","memory":"44.5 MB","code":"class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        List<List<String>> solutions = new ArrayList<>();\n        char[][] board = new char[n][n];\n        for (char[] row : board) {\n            Arrays.fill(row, '.');\n        }\n        solve(board, 0, solutions);\n        return solutions;\n    }\n\n    private void solve(char[][] board, int col, List<List<String>> solutions) {\n        if (col == board.length) {\n            // Add a copy of the current board configuration as a solution\n            solutions.add(copyBoard(board));\n            return;\n        }\n\n        for (int row = 0; row < board.length; row++) {\n            if (isValid(board, row, col)) {\n                board[row][col] = 'Q';\n                solve(board, col + 1, solutions); // Recursively solve for next column\n                board[row][col] = '.'; // Backtrack and reset the position\n            }\n        }\n    }\n\n    private boolean isValid(char[][] board, int row, int col) {\n        // Check for queens in the same row\n        for (int i = 0; i < col; i++) {\n            if (board[row][i] == 'Q') {\n                return false;\n            }\n        }\n\n        // Check for queens in diagonals (upward and downward)\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        for (int i = row + 1, j = col - 1; i < board.length && j >= 0; i++, j--) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private List<String> copyBoard(char[][] board) {\n        List<String> boardStr = new ArrayList<>();\n        for (char[] row : board) {\n            boardStr.add(new String(row));\n        }\n        return boardStr;\n    }\n}\n","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}