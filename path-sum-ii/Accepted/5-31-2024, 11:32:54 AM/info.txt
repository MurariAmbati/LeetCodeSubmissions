{"id":1273451535,"question_id":113,"lang":"java","lang_name":"Java","time":"1 hour, 12 minutes","timestamp":1717173174,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1273451535/","is_pending":"Not Pending","title":"Path Sum II","memory":"43.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> currentPath = new ArrayList<>();\n        dfs(root, targetSum, currentPath, result);\n        return result;\n    }\n    \n    private void dfs(TreeNode node, int targetSum, List<Integer> currentPath, List<List<Integer>> result) {\n        if (node == null) return;\n        \n        currentPath.add(node.val);\n        \n        // If the current node is a leaf and its value equals targetSum, add the current path to the result\n        if (node.left == null && node.right == null && node.val == targetSum) {\n            result.add(new ArrayList<>(currentPath));\n        } else {\n            // Continue DFS traversal\n            dfs(node.left, targetSum - node.val, currentPath, result);\n            dfs(node.right, targetSum - node.val, currentPath, result);\n        }\n        \n        // Backtrack: remove the current node from the path before returning\n        currentPath.remove(currentPath.size() - 1);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-ii","has_notes":false,"flag_type":1}