{"id":1236652346,"question_id":44,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713539847,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1236652346/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"44.5 MB","code":"class Solution {\n    public boolean isMatch(String s, String p) {\n        int m = s.length();\n        int n = p.length();\n\n        // Initialize a 2D boolean DP table to store results\n        boolean[][] dp = new boolean[m + 1][n + 1];\n\n        // Base case: empty string matches empty pattern\n        dp[0][0] = true;\n\n        // Handle patterns with leading '*' (can match empty string)\n        for (int j = 1; j <= n; j++) {\n            if (p.charAt(j - 1) == '*') {\n                dp[0][j] = dp[0][j - 1]; // Inherit from the previous '*' match\n            }\n        }\n\n        // Fill the DP table\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                char ch1 = s.charAt(i - 1);\n                char ch2 = p.charAt(j - 1);\n\n                // If characters match or pattern is '?' (match any single char)\n                if (ch1 == ch2 || ch2 == '?') {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else if (ch2 == '*') {\n                    // '*' can match multiple characters or zero characters\n                    // Try skipping the character in the string (dp[i][j - 1])\n                    // Or try matching the character and continuing (dp[i - 1][j])\n                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j]; \n                }\n            }\n        }\n\n        // Return the bottom right corner of the DP table for the final result\n        return dp[m][n];\n    }\n}\n","compare_resulttitle_slug":"wildcard-matching","has_notes":false,"flag_type":1}