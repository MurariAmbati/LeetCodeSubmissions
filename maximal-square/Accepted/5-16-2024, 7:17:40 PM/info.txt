{"id":1260068266,"question_id":221,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905060,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1260068266/","is_pending":"Not Pending","title":"Maximal Square","memory":"57.3 MB","code":"public class Solution {\n    public int maximalSquare(char[][] matrix) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        \n        // Initialize dp array\n        int[][] dp = new int[m][n];\n        \n        // Initialize result to store the maximum square area\n        int result = 0;\n        \n        // Initialize the first row and first column of the dp array\n        for (int i = 0; i < m; i++) {\n            dp[i][0] = matrix[i][0] - '0';\n            result = Math.max(result, dp[i][0]);\n        }\n        for (int j = 0; j < n; j++) {\n            dp[0][j] = matrix[0][j] - '0';\n            result = Math.max(result, dp[0][j]);\n        }\n        \n        // Compute dp values for the rest of the array\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] == '1') {\n                    dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;\n                    result = Math.max(result, dp[i][j]);\n                }\n            }\n        }\n        \n        // Return the maximum square area\n        return result * result;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square","has_notes":false,"flag_type":1}