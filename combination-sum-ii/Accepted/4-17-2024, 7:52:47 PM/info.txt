{"id":1235319097,"question_id":40,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713401567,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1235319097/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43.2 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> results = new ArrayList<>();\n        Arrays.sort(candidates);  // Sort candidates to avoid duplicate combinations\n        \n        dfs(candidates, target, 0, new ArrayList<>(), results);\n        return results;\n    }\n    \n    private void dfs(int[] candidates, int remaining, int startIndex, List<Integer> currComb, List<List<Integer>> results) {\n        if (remaining == 0) {\n            results.add(new ArrayList<>(currComb));  // Add a copy to avoid modifications\n            return;\n        }\n        \n        for (int i = startIndex; i < candidates.length; i++) {\n            if (candidates[i] > remaining) {\n                break;\n            }\n            // Skip duplicates (same candidate as previous but not at the same position)\n            if (i > startIndex && candidates[i] == candidates[i - 1]) {\n                continue;\n            }\n            currComb.add(candidates[i]);\n            dfs(candidates, remaining - candidates[i], i + 1, currComb, results);  // Skip elements after the current one\n            currComb.remove(currComb.size() - 1);\n        }\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}