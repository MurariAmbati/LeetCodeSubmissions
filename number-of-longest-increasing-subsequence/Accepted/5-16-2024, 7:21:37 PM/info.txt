{"id":1260069893,"question_id":673,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905297,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1260069893/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"43.8 MB","code":"public class Solution {\n    public int findNumberOfLIS(int[] nums) {\n        int n = nums.length;\n        int[] lengths = new int[n];\n        int[] counts = new int[n];\n        Arrays.fill(lengths, 1);\n        Arrays.fill(counts, 1);\n        \n        int maxLength = 1;\n        int result = 0;\n        \n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[i] > nums[j]) {\n                    if (lengths[j] + 1 > lengths[i]) {\n                        lengths[i] = lengths[j] + 1;\n                        counts[i] = counts[j];\n                    } else if (lengths[j] + 1 == lengths[i]) {\n                        counts[i] += counts[j];\n                    }\n                }\n            }\n            maxLength = Math.max(maxLength, lengths[i]);\n        }\n        \n        for (int i = 0; i < n; i++) {\n            if (lengths[i] == maxLength) {\n                result += counts[i];\n            }\n        }\n        \n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}