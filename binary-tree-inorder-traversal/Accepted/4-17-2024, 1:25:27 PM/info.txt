{"id":1235127122,"question_id":94,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713378327,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1235127122/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"41.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        inorderTraversal(root, result);\n        return result;\n    }\n    \n    private void inorderTraversal(TreeNode root, List<Integer> result) {\n        if (root == null) {\n            return;\n        }\n        inorderTraversal(root.left, result);\n        result.add(root.val);\n        inorderTraversal(root.right, result);\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}