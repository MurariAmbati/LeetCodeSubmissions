{"id":1260074889,"question_id":96,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715906017,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1260074889/","is_pending":"Not Pending","title":"Unique Binary Search Trees","memory":"N/A","code":"class MyHashMap {\n  private static final int BUCKET_SIZE = 1000; // Adjust bucket size as needed\n  private List<Node>[] buckets;\n\n  public MyHashMap() {\n    buckets = new ArrayList<>(BUCKET_SIZE);\n    for (int i = 0; i < BUCKET_SIZE; i++) {\n      buckets.add(null);\n    }\n  }\n\n  public void put(int key, int value) {\n    int bucketIndex = getBucketIndex(key);\n    Node head = buckets[bucketIndex];\n\n    // Traverse the bucket list and update if key found, otherwise insert a new node\n    while (head != null) {\n      if (head.key == key) {\n        head.value = value;\n        return;\n      }\n      head = head.next;\n    }\n\n    // If key not found, create a new node and insert it at the beginning of the bucket list\n    Node newNode = new Node(key, value);\n    newNode.next = buckets[bucketIndex];\n    buckets[bucketIndex] = newNode;\n  }\n\n  public int get(int key) {\n    int bucketIndex = getBucketIndex(key);\n    Node head = buckets[bucketIndex];\n\n    // Traverse the bucket list and search for the key\n    while (head != null) {\n      if (head.key == key) {\n        return head.value;\n      }\n      head = head.next;\n    }\n\n    // Key not found, return -1\n    return -1;\n  }\n\n  public void remove(int key) {\n    int bucketIndex = getBucketIndex(key);\n    Node head = buckets[bucketIndex];\n    Node prev = null;\n\n    // Traverse the bucket list and remove the node with the matching key\n    while (head != null) {\n      if (head.key == key) {\n        if (prev == null) {\n          buckets[bucketIndex] = head.next;\n        } else {\n          prev.next = head.next;\n        }\n        return;\n      }\n      prev = head;\n      head = head.next;\n    }\n  }\n\n  private int getBucketIndex(int key) {\n    return key % BUCKET_SIZE;\n  }\n\n  // Node class to store key-value pairs within a bucket\n  private static class Node {\n    int key;\n    int value;\n    Node next;\n\n    public Node(int key, int value) {\n      this.key = key;\n      this.value = value;\n    }\n  }\n}","compare_result":null,"title_slug":"unique-binary-search-trees","has_notes":false,"flag_type":1}