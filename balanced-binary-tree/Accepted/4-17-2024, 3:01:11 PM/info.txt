{"id":1235195433,"question_id":110,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713384071,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1235195433/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"44.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        return checkHeight(root) != -1;\n    }\n\n    private int checkHeight(TreeNode node) {\n        if (node == null) {\n            return 0;  // Empty tree has height 0\n        }\n\n        int leftHeight = checkHeight(node.left);\n        int rightHeight = checkHeight(node.right);\n\n        // Check for imbalance and return -1 if found\n        if (leftHeight == -1 || rightHeight == -1 || Math.abs(leftHeight - rightHeight) > 1) {\n            return -1;\n        }\n\n        return max(leftHeight, rightHeight) + 1;  // Return height if balanced\n    }\n\n    private int max(int a, int b) {\n        return a > b ? a : b;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}