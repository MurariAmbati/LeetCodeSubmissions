{"id":1236653752,"question_id":52,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713539970,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1236653752/","is_pending":"Not Pending","title":"N-Queens II","memory":"40 MB","code":"class Solution {\n    int count = 0;\n\n    public int totalNQueens(int n) {\n        boolean[] cols = new boolean[n]; // To keep track of used columns\n        boolean[] diag1 = new boolean[2 * n - 1]; // To keep track of used diagonals (upward)\n        boolean[] diag2 = new boolean[2 * n - 1]; // To keep track of used diagonals (downward)\n        solve(0, cols, diag1, diag2, n);\n        return count;\n    }\n\n    private void solve(int row, boolean[] cols, boolean[] diag1, boolean[] diag2, int n) {\n        if (row == n) {\n            count++; // Increment count for a valid solution (all queens placed)\n            return;\n        }\n\n        for (int col = 0; col < n; col++) {\n            int index1 = row + col; // Index for upward diagonal\n            int index2 = row - col + n - 1; // Index for downward diagonal\n\n            if (!cols[col] && !diag1[index1] && !diag2[index2]) {\n                cols[col] = true;\n                diag1[index1] = true;\n                diag2[index2] = true;\n\n                solve(row + 1, cols, diag1, diag2, n);\n\n                cols[col] = false;\n                diag1[index1] = false;\n                diag2[index2] = false;\n            }\n        }\n    }\n}\n","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}