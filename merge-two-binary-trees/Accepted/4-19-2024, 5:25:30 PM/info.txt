{"id":1236918370,"question_id":617,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713565530,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1236918370/","is_pending":"Not Pending","title":"Merge Two Binary Trees","memory":"44.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if (root1 == null) {\n            return root2;\n        }\n        if (root2 == null) {\n            return root1;\n        }\n\n        TreeNode merged = new TreeNode(root1.val + root2.val);\n        merged.left = mergeTrees(root1.left, root2.left);\n        merged.right = mergeTrees(root1.right, root2.right);\n\n        return merged;\n    }\n\n    // Helper function to print tree (for verification)\n    public void printTree(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        System.out.println(root.val);\n        printTree(root.left);\n        printTree(root.right);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-binary-trees","has_notes":false,"flag_type":1}