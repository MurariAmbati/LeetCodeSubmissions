{"id":1236927960,"question_id":79,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713567233,"status":10,"status_display":"Accepted","runtime":"145 ms","url":"/submissions/detail/1236927960/","is_pending":"Not Pending","title":"Word Search","memory":"41.3 MB","code":"public class Solution {\n    public boolean exist(char[][] board, String word) {\n        int m = board.length;\n        int n = board[0].length;\n        boolean[][] visited = new boolean[m][n];\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (backtrack(board, word, visited, i, j, 0)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    private boolean backtrack(char[][] board, String word, boolean[][] visited, int row, int col, int idx) {\n        if (idx == word.length()) {\n            return true;\n        }\n        if (row < 0 || row >= board.length || col < 0 || col >= board[0].length || visited[row][col] || board[row][col] != word.charAt(idx)) {\n            return false;\n        }\n        \n        visited[row][col] = true;\n        if (backtrack(board, word, visited, row + 1, col, idx + 1)\n           || backtrack(board, word, visited, row - 1, col, idx + 1)\n           || backtrack(board, word, visited, row, col + 1, idx + 1)\n           || backtrack(board, word, visited, row, col - 1, idx + 1)) {\n            return true;\n        }\n        visited[row][col] = false;\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}