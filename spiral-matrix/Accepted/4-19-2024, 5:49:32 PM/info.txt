{"id":1236926497,"question_id":54,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713566972,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1236926497/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"41.3 MB","code":"import java.util.*;\n\npublic class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        List<Integer> result = new ArrayList<>();\n        if (matrix == null || matrix.length == 0) {\n            return result;\n        }\n        \n        int m = matrix.length;\n        int n = matrix[0].length;\n        \n        int top = 0, bottom = m - 1, left = 0, right = n - 1;\n        \n        while (top <= bottom && left <= right) {\n            // Traverse top row\n            for (int i = left; i <= right; i++) {\n                result.add(matrix[top][i]);\n            }\n            top++;\n            \n            // Traverse right column\n            for (int i = top; i <= bottom; i++) {\n                result.add(matrix[i][right]);\n            }\n            right--;\n            \n            // Check if remaining rows exist to avoid duplicates\n            if (top <= bottom) {\n                // Traverse bottom row\n                for (int i = right; i >= left; i--) {\n                    result.add(matrix[bottom][i]);\n                }\n                bottom--;\n            }\n            \n            // Check if remaining columns exist to avoid duplicates\n            if (left <= right) {\n                // Traverse left column\n                for (int i = bottom; i >= top; i--) {\n                    result.add(matrix[i][left]);\n                }\n                left++;\n            }\n        }\n        \n        return result;\n    }\n}\n","compare_result":"1111111111111111111111111","title_slug":"spiral-matrix","has_notes":false,"flag_type":1}