{"id":1235192271,"question_id":101,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713383753,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1235192271/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"41.9 MB","code":"class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true; // An empty tree is symmetric.\n        }\n        return isMirror(root.left, root.right);\n    }\n    \n    private boolean isMirror(TreeNode left, TreeNode right) {\n        if (left == null && right == null) {\n            return true; // Both nodes are null, so they are symmetric.\n        }\n        if (left == null || right == null) {\n            return false; // One node is null, they are not symmetric.\n        }\n        // Check if the values of the current nodes are equal.\n        if (left.val != right.val) {\n            return false;\n        }\n        // Recursively check the left child of the left subtree with the right child of the right subtree,\n        // and vice versa.\n        return isMirror(left.left, right.right) && isMirror(left.right, right.left);\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}