{"id":1260068754,"question_id":516,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905133,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1260068754/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"55.4 MB","code":"public class Solution {\n    public int longestPalindromeSubseq(String s) {\n        int n = s.length();\n        \n        // Initialize dp array\n        int[][] dp = new int[n][n];\n        \n        // Base case: single characters are palindromes of length 1\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        \n        // Iterate through the string\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i <= n - len; i++) {\n                int j = i + len - 1;\n                if (s.charAt(i) == s.charAt(j)) {\n                    // If characters at i and j match, the length of the palindrome increases by 2\n                    dp[i][j] = 2 + dp[i + 1][j - 1];\n                } else {\n                    // Otherwise, take the maximum of palindrome lengths by excluding either the left or right character\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        // Return the length of the longest palindromic subsequence in the entire string\n        return dp[0][n - 1];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence","has_notes":false,"flag_type":1}