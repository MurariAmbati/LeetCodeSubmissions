{"id":1260068043,"question_id":967,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905029,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1260068043/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"45.8 MB","code":"public class Solution {\n    public int minFallingPathSum(int[][] matrix) {\n        int n = matrix.length;\n        \n        // Initialize dp array to store minimum falling path sum\n        int[][] dp = new int[n][n];\n        \n        // Copy the first row of the matrix to the dp array\n        for (int j = 0; j < n; j++) {\n            dp[0][j] = matrix[0][j];\n        }\n        \n        // Iterate from the second row to the last row\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                // Initialize minPathSum with the value of the current element in the matrix\n                int minPathSum = matrix[i][j];\n                \n                // Update minPathSum with the minimum falling path sum from the previous row\n                minPathSum += dp[i - 1][j];\n                if (j > 0) {\n                    minPathSum = Math.min(minPathSum, dp[i - 1][j - 1] + matrix[i][j]);\n                }\n                if (j < n - 1) {\n                    minPathSum = Math.min(minPathSum, dp[i - 1][j + 1] + matrix[i][j]);\n                }\n                \n                // Update the dp array with the minimum falling path sum\n                dp[i][j] = minPathSum;\n            }\n        }\n        \n        // Find the minimum falling path sum in the last row of the dp array\n        int minSum = Integer.MAX_VALUE;\n        for (int j = 0; j < n; j++) {\n            minSum = Math.min(minSum, dp[n - 1][j]);\n        }\n        \n        // Return the minimum falling path sum\n        return minSum;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum","has_notes":false,"flag_type":1}