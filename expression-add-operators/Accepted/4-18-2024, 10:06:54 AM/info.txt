{"id":1235817699,"question_id":282,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713452814,"status":10,"status_display":"Accepted","runtime":"115 ms","url":"/submissions/detail/1235817699/","is_pending":"Not Pending","title":"Expression Add Operators","memory":"45.5 MB","code":"import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n    public List<String> addOperators(String num, int target) {\n        List<String> result = new ArrayList<>();\n        backtrack(result, num, target, \"\", 0, 0, 0);\n        return result;\n    }\n\n    private void backtrack(List<String> result, String num, int target, String expression, int index, long eval, long prevNum) {\n        if (index == num.length()) {\n            if (eval == target) {\n                result.add(expression);\n            }\n            return;\n        }\n\n        for (int i = index; i < num.length(); i++) {\n            if (i != index && num.charAt(index) == '0') {\n                break; // Skip leading zeros\n            }\n            long currNum = Long.parseLong(num.substring(index, i + 1));\n            if (index == 0) {\n                backtrack(result, num, target, expression + currNum, i + 1, currNum, currNum);\n            } else {\n                backtrack(result, num, target, expression + \"+\" + currNum, i + 1, eval + currNum, currNum);\n                backtrack(result, num, target, expression + \"-\" + currNum, i + 1, eval - currNum, -currNum);\n                backtrack(result, num, target, expression + \"*\" + currNum, i + 1, eval - prevNum + prevNum * currNum, prevNum * currNum);\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111","title_slug":"expression-add-operators","has_notes":false,"flag_type":1}