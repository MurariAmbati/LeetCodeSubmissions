{"id":1260072116,"question_id":2096,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715905612,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1260072116/","is_pending":"Not Pending","title":"Find the Longest Valid Obstacle Course at Each Position","memory":"N/A","code":"import java.util.ArrayList;\nimport java.util.List;\n\npublic class Solution {\n    public List<Integer> longestObstacleCourseAtEachPosition(int[] obstacles) {\n        List<Integer> course = new ArrayList<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (int obstacle : obstacles) {\n            int idx = binarySearch(course, obstacle);\n            if (idx == course.size()) {\n                course.add(obstacle);\n            } else {\n                course.set(idx, obstacle);\n            }\n            result.add(idx + 1);\n        }\n        \n        return result;\n    }\n    \n    private int binarySearch(List<Integer> course, int target) {\n        int left = 0, right = course.size();\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (course.get(mid) <= target) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n}","compare_result":null,"title_slug":"find-the-longest-valid-obstacle-course-at-each-position","has_notes":false,"flag_type":1}