{"id":1235196928,"question_id":111,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713384217,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1235196928/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"63 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        if (root == null) {  // Empty tree has depth 0 (base case)\n            return 0;\n        }\n\n        // Handle cases where one subtree is empty\n        if (root.left == null) {\n            return minDepth(root.right) + 1;\n        } else if (root.right == null) {\n            return minDepth(root.left) + 1;\n        }\n\n        // Find minimum depth from both subtrees\n        int leftDepth = minDepth(root.left);\n        int rightDepth = minDepth(root.right);\n\n        return Math.min(leftDepth, rightDepth) + 1;  // Minimum depth + 1 for current node\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false,"flag_type":1}