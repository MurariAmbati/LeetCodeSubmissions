{"id":1235318676,"question_id":39,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713401506,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1235318676/","is_pending":"Not Pending","title":"Combination Sum","memory":"N/A","code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> results = new ArrayList<>();\n        \n        dfs(candidates, target, 0, new ArrayList<>(), results);\n        return results;\n    }\n    \n    private void dfs(int[] candidates, int remaining, int startIndex, List<Integer> currComb, List<List<Integer>> results) {\n        if (remaining == 0) {\n            results.add(new ArrayList<>(currComb));  // Add a copy to avoid modifications\n            return;\n        }\n        \n        for (int i = startIndex; i < candidates.length; i++) {\n            if (candidates[i] > remaining) {\n                break;\n            }\n            currComb.add(candidates[i]);\n            dfs(candidates, remaining - candidates[i], i, currComb, results);  // Don't skip elements\n            currComb.remove(currComb.size() - 1);\n        }\n    }\n}\n","compare_result":"1111111111100011011001000010110010011110000100110101010111010100000000000000000000000000000000000000000000001000111000000000000000000000000000000000000000000000","title_slug":"combination-sum","has_notes":false,"flag_type":1}