{"id":1241953954,"question_id":242,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1714073708,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1241953954/","is_pending":"Not Pending","title":"Valid Anagram","memory":"44.4 MB","code":"class Solution {\n    public boolean isAnagram(String s, String t) {\n         if (s.length() != t.length()) {\n            return false; // Different lengths cannot be anagrams\n        }\n        \n        // Option 1: Using Character Counting (HashMap)\n        HashMap<Character, Integer> charCount = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        for (char c : t.toCharArray()) {\n            if (!charCount.containsKey(c) || charCount.get(c) == 0) {\n                return false;\n            }\n            charCount.put(c, charCount.get(c) - 1);\n        }\n        return charCount.values().stream().allMatch(count -> count == 0);\n\n        // Option 2: Using Sorting (potentially less efficient for large strings)\n        // char[] sChars = s.toCharArray();\n        // char[] tChars = t.toCharArray();\n        // Arrays.sort(sChars);\n        // Arrays.sort(tChars);\n        // return Arrays.equals(sChars, tChars);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1}