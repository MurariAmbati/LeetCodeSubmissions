{"id":1260116882,"question_id":337,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1715911948,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1260116882/","is_pending":"Not Pending","title":"House Robber III","memory":"44.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int rob(TreeNode root) {\n        int[] result = robSub(root);\n        return Math.max(result[0], result[1]);\n    }\n    \n    private int[] robSub(TreeNode root) {\n        if (root == null) return new int[2];\n        \n        int[] left = robSub(root.left);\n        int[] right = robSub(root.right);\n        \n        // result[0] represents the maximum amount of money robbed without robbing the current node\n        // result[1] represents the maximum amount of money robbed by robbing the current node\n        int[] result = new int[2];\n        \n        // If we don't rob the current node, we can take the maximum of robbing or not robbing its children\n        result[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);\n        \n        // If we rob the current node, we cannot rob its children\n        result[1] = root.val + left[0] + right[0];\n        \n        return result;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}