{"id":1235820355,"question_id":312,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713453035,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1235820355/","is_pending":"Not Pending","title":"Burst Balloons","memory":"42.4 MB","code":"public class Solution {\n    public int maxCoins(int[] nums) {\n        int n = nums.length;\n        // Create a new array with padded 1s at both ends\n        int[] paddedNums = new int[n + 2];\n        paddedNums[0] = paddedNums[n + 1] = 1;\n        for (int i = 0; i < n; i++) {\n            paddedNums[i + 1] = nums[i];\n        }\n        \n        int[][] dp = new int[n + 2][n + 2];\n        \n        // Iterate over all possible lengths of subarrays\n        for (int len = 1; len <= n; len++) {\n            // Iterate over all possible starting points of subarrays\n            for (int left = 1; left <= n - len + 1; left++) {\n                int right = left + len - 1;\n                // Iterate over all possible bursting points within the subarray\n                for (int k = left; k <= right; k++) {\n                    // Burst balloon at index k, update dp[left][right]\n                    dp[left][right] = Math.max(dp[left][right], \n                                               dp[left][k - 1] + \n                                               paddedNums[left - 1] * paddedNums[k] * paddedNums[right + 1] + \n                                               dp[k + 1][right]);\n                }\n            }\n        }\n        return dp[1][n];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"burst-balloons","has_notes":false,"flag_type":1}