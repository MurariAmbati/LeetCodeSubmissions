{"id":1235093020,"question_id":20,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713376087,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1235093020/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"41.4 MB","code":"class Solution {\n    public boolean isValid(String s) {\n        // Create a stack to store opening brackets\n        Stack<Character> stack = new Stack<>();\n        \n        // Iterate through each character in the string\n        for (char c : s.toCharArray()) {\n            if (c == '(' || c == '[' || c == '{') {\n                // If it's an opening bracket, push it onto the stack\n                stack.push(c);\n            } else {\n                // If it's a closing bracket, check if it matches the top of the stack\n                if (stack.isEmpty()) {\n                    return false; // No matching opening bracket\n                }\n                char top = stack.pop();\n                if ((c == ')' && top != '(') ||\n                    (c == ']' && top != '[') ||\n                    (c == '}' && top != '{')) {\n                    return false; // Mismatched brackets\n                }\n            }\n        }\n        \n        // If the stack is empty, all brackets matched correctly\n        return stack.isEmpty();\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false,"flag_type":1}