{"id":1235791609,"question_id":594,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713450600,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1235791609/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"45.4 MB","code":"public class Solution {\r\n    public int findLHS(int[] nums) {\r\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\r\n        for (int num : nums) {\r\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\r\n        }\r\n        \r\n        int longestSubsequenceLength = 0;\r\n        for (int num : frequencyMap.keySet()) {\r\n            if (frequencyMap.containsKey(num + 1)) {\r\n                longestSubsequenceLength = Math.max(longestSubsequenceLength, frequencyMap.get(num) + frequencyMap.get(num + 1));\r\n            }\r\n        }\r\n        \r\n        return longestSubsequenceLength;\r\n    }\r\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1}