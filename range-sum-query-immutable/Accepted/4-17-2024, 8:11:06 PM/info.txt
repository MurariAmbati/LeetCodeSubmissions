{"id":1235326781,"question_id":303,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713402666,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1235326781/","is_pending":"Not Pending","title":"Range Sum Query - Immutable","memory":"49.2 MB","code":"class NumArray {\n\n    private int[] prefixSum;\n\n    public NumArray(int[] nums) {\n        prefixSum = new int[nums.length + 1];\n        for (int i = 0; i < nums.length; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n    }\n\n    public int sumRange(int left, int right) {\n        // Return the sum between left (inclusive) and right (inclusive) using prefix sum\n        return prefixSum[right + 1] - prefixSum[left];\n    }\n}\n","compare_result":"111111111111111","title_slug":"range-sum-query-immutable","has_notes":false,"flag_type":1}