{"id":1238691808,"question_id":904,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713753998,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1238691808/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"41 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        StringBuilder leafSeq1 = new StringBuilder();\n        StringBuilder leafSeq2 = new StringBuilder();\n        collectLeafValues(root1, leafSeq1);\n        collectLeafValues(root2, leafSeq2);\n        return leafSeq1.toString().equals(leafSeq2.toString());\n    }\n    \n    private void collectLeafValues(TreeNode root, StringBuilder leafSeq) {\n        if (root == null) return;\n        if (root.left == null && root.right == null) {\n            leafSeq.append(root.val).append(\",\");\n        }\n        collectLeafValues(root.left, leafSeq);\n        collectLeafValues(root.right, leafSeq);\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}