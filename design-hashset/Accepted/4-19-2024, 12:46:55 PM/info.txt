{"id":1236760939,"question_id":816,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1713548815,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1236760939/","is_pending":"Not Pending","title":"Design HashSet","memory":"51.5 MB","code":"class MyHashSet {\n  private static final int BUCKET_SIZE = 1000; // Adjust bucket size as needed\n  private List<List<Integer>> buckets;\n\n  public MyHashSet() {\n    buckets = new ArrayList<>(BUCKET_SIZE);\n    for (int i = 0; i < BUCKET_SIZE; i++) {\n      buckets.add(new LinkedList<>());\n    }\n  }\n  \n  public void add(int key) {\n    int bucketIndex = getBucketIndex(key);\n    List<Integer> bucket = buckets.get(bucketIndex);\n    if (!bucket.contains(key)) {\n      bucket.add(key);\n    }\n  }\n\n  public boolean contains(int key) {\n    int bucketIndex = getBucketIndex(key);\n    List<Integer> bucket = buckets.get(bucketIndex);\n    return bucket.contains(key);\n  }\n\n  public void remove(int key) {\n    int bucketIndex = getBucketIndex(key);\n    List<Integer> bucket = buckets.get(bucketIndex);\n    bucket.remove(Integer.valueOf(key)); // Remove by value (avoid boxing overhead)\n  }\n\n  private int getBucketIndex(int key) {\n    return key % BUCKET_SIZE;\n  }\n}\n","compare_result":"111111111111111111111111111111111","title_slug":"design-hashset","has_notes":false,"flag_type":1}